{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction MyFormComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\", 3);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const control_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", control_r1.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(control_r1.label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", control_r1.type)(\"formControlName\", control_r1.name)(\"value\", control_r1.value)(\"id\", control_r1.name);\n  }\n}\nexport class MyFormComponent {\n  constructor(http, fb) {\n    this.http = http;\n    this.fb = fb;\n    this.myForm = this.fb.group({});\n  }\n  ngOnInit() {\n    this.http.get('/assets/my-form.json').subscribe(data => {\n      this.formData = data;\n      this.createForm(this.formData.controls);\n    });\n  }\n  createForm(controls) {\n    for (const control of controls) {\n      //Validator Logic\n      const validatorsToAdd = [];\n      for (const [key, value] of Object.entries(control.validators)) switch (key) {\n        case 'required':\n          if (value) {\n            validatorsToAdd.push(Validators.required);\n          }\n          break;\n        case 'minLength':\n          validatorsToAdd.push(Validators.minLength(5));\n          break;\n        default:\n          break;\n      }\n      this.myForm.addControl(control.name, this.fb.control(control.value, validatorsToAdd));\n    }\n  }\n  onSubmit() {\n    console.log('Form valid?: ', this.myForm.valid);\n    console.log('Form Values: ', this.myForm.value);\n  }\n}\nMyFormComponent.ɵfac = function MyFormComponent_Factory(t) {\n  return new (t || MyFormComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nMyFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MyFormComponent,\n  selectors: [[\"app-my-form\"]],\n  inputs: {\n    jsonFormData: \"jsonFormData\"\n  },\n  decls: 14,\n  vars: 6,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\"], [3, \"for\"], [3, \"type\", \"formControlName\", \"value\", \"id\"]],\n  template: function MyFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\");\n      i0.ɵɵtext(1, \"My Form Component\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function MyFormComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵtemplate(3, MyFormComponent_div_3_Template, 4, 6, \"div\", 1);\n      i0.ɵɵelementStart(4, \"div\")(5, \"button\", 2);\n      i0.ɵɵtext(6, \"Submit\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(7, \"hr\");\n      i0.ɵɵtext(8);\n      i0.ɵɵelementStart(9, \"pre\");\n      i0.ɵɵtext(10);\n      i0.ɵɵpipe(11, \"json\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"hr\")(13, \"br\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.myForm);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.formData == null ? null : ctx.formData.controls);\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate1(\"\\nValid?: \", ctx.myForm.valid, \"\\n\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"    \", i0.ɵɵpipeBind1(11, 4, ctx.myForm.value), \"\\n\");\n    }\n  },\n  dependencies: [i3.NgForOf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i3.JsonPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;ICC/DC,2BAAgD;IAChBA,YAAmB;IAAAA,iBAAQ;IACvDA,2BAIyB;IAC7BA,iBAAM;;;;IANKA,eAAoB;IAApBA,qCAAoB;IAACA,eAAmB;IAAnBA,sCAAmB;IAE5CA,eAAqB;IAArBA,sCAAqB;;;ADGhC,OAAM,MAAOC,eAAe;EAQ1BC,YAAoBC,IAAgB,EAAUC,EAAe;IAAzC,SAAI,GAAJD,IAAI;IAAsB,OAAE,GAAFC,EAAE;IAFzC,WAAM,GAAc,IAAI,CAACA,EAAE,CAACC,KAAK,CAAC,EAAE,CAAC;EAEoB;EAEhEC,QAAQ;IACN,IAAI,CAACH,IAAI,CACRI,GAAG,CAAC,sBAAsB,CAAC,CAC3BC,SAAS,CAAEC,IAAI,IAAI;MAClB,IAAI,CAACC,QAAQ,GAAGD,IAAI;MACpB,IAAI,CAACE,UAAU,CAAC,IAAI,CAACD,QAAQ,CAACE,QAAQ,CAAC;IACzC,CAAC,CAAC;EACJ;EAEAD,UAAU,CAACC,QAAe;IACxB,KAAK,MAAMC,OAAO,IAAID,QAAQ,EAAE;MAE9B;MACA,MAAME,eAAe,GAAG,EAAE;MAE1B,KAAI,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,OAAO,CAACM,UAAU,CAAC,EAC1D,QAAQJ,GAAG;QACT,KAAK,UAAU;UACb,IAAIC,KAAK,EAAE;YACTF,eAAe,CAACM,IAAI,CAACrB,UAAU,CAACsB,QAAQ,CAAC;;UAE3C;QACF,KAAK,WAAW;UACdP,eAAe,CAACM,IAAI,CAACrB,UAAU,CAACuB,SAAS,CAAC,CAAC,CAAC,CAAC;UAC7C;QACF;UACE;MAAM;MAGZ,IAAI,CAACC,MAAM,CAACC,UAAU,CACpBX,OAAO,CAACY,IAAI,EACZ,IAAI,CAACrB,EAAE,CAACS,OAAO,CAACA,OAAO,CAACG,KAAK,EAAEF,eAAe,CAAC,CAAC;;EAEtD;EAEAY,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,IAAI,CAACL,MAAM,CAACM,KAAK,CAAC;IAC/CF,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,IAAI,CAACL,MAAM,CAACP,KAAK,CAAC;EACjD;;AAhDWf,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAA6B;EAAAC;IAAAC;EAAA;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT5BpC,0BAAI;MAAAA,iCAAiB;MAAAA,iBAAK;MAE1BA,+BAAmD;MAAxBA;QAAA,OAAYqC,cAAU;MAAA,EAAC;MAC9CrC,gEAOM;MACNA,2BAAK;MACqBA,sBAAM;MAAAA,iBAAS;MAI7CA,qBAAI;MACJA,YACA;MAAAA,2BAAK;MACDA,aACJ;;MAAAA,iBAAM;MAENA,sBAAI;;;MApBEA,eAAoB;MAApBA,sCAAoB;MACGA,eAAqB;MAArBA,6EAAqB;MAclDA,eACA;MADAA,2DACA;MACIA,eACJ;MADIA,4EACJ","names":["Validators","i0","MyFormComponent","constructor","http","fb","group","ngOnInit","get","subscribe","data","formData","createForm","controls","control","validatorsToAdd","key","value","Object","entries","validators","push","required","minLength","myForm","addControl","name","onSubmit","console","log","valid","selectors","inputs","jsonFormData","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\websites\\DynamicControls\\dynamic-controls-app\\src\\app\\my-form\\my-form.component.ts","C:\\websites\\DynamicControls\\dynamic-controls-app\\src\\app\\my-form\\my-form.component.html"],"sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-my-form',\n  templateUrl: './my-form.component.html',\n  styleUrls: ['./my-form.component.css'], \n})\nexport class MyFormComponent implements OnInit {\n\n  @Input() jsonFormData: any;\n\n  public formData: any;\n\n  public myForm: FormGroup = this.fb.group({});\n\n  constructor(private http: HttpClient, private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.http\n    .get('/assets/my-form.json')\n    .subscribe((data) => {\n      this.formData = data;\n      this.createForm(this.formData.controls);\n    });\n  }\n\n  createForm(controls: any[]) {\n    for (const control of controls) {\n\n      //Validator Logic\n      const validatorsToAdd = [];\n\n      for(const [key, value] of Object.entries(control.validators))\n        switch (key) {\n          case 'required': \n            if (value) {\n              validatorsToAdd.push(Validators.required);\n            }\n            break;\n          case 'minLength':\n            validatorsToAdd.push(Validators.minLength(5));\n            break;\n          default:\n            break;\n        }\n\n      this.myForm.addControl(\n        control.name, \n        this.fb.control(control.value, validatorsToAdd));\n    }\n  }\n\n  onSubmit() {\n    console.log('Form valid?: ', this.myForm.valid);\n    console.log('Form Values: ', this.myForm.value);\n  }\n}\n","<h3>My Form Component</h3>\n\n<form [formGroup]=\"myForm\" (ngSubmit)=\"onSubmit()\">\n    <div *ngFor=\"let control of formData?.controls\">\n        <label [for]=\"control.name\">{{ control.label }}</label>\n        <input \n           [type]=\"control.type\"\n           [formControlName]=\"control.name\"\n           [value]=\"control.value\"\n           [id]=\"control.name\" />\n    </div>\n    <div>\n        <button type=\"submit\">Submit</button>\n    </div>\n</form>\n\n<hr>\nValid?: {{ myForm.valid}}\n<pre>\n    {{ myForm.value | json }}\n</pre>\n\n<hr>\n<br>\n<!-- <pre>\n    {{ formData.controls | json }}\n</pre> -->"]},"metadata":{},"sourceType":"module","externalDependencies":[]}